<#
                .Email
                Manick351@live.com
                .SYNOPSIS
                Сканирует выбранную сеть на предмет сетевых принтеров.

                .DESCRIPTION
                Общий шаблон для сканирования сетевых принтеров и мфу
                Использует два варинта, общий и краткий.
                
                .PARAMETER delete
                Для использования краткого запроса необходимо использовать параметр -ShortOutput 
#>


param (
    [switch]$ShortOutput
)

# Цикл повтора
do {

# Загрузка сборки для работы с формами Windows
Add-Type -AssemblyName System.Windows.Forms

# Создание формы
$form = New-Object Windows.Forms.Form
$form.Text = "Сканер сети"
$form.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedDialog
$form.MaximizeBox = $false
$form.MinimizeBox = $false
$form.StartPosition = "CenterScreen"
$form.Size = New-Object Drawing.Size(370, 300)

# Лейбл для сканирования сети
$labelScan = New-Object Windows.Forms.Label
$labelScan.Location = New-Object Drawing.Point(30, 60)
$labelScan.Size = New-Object Drawing.Size(350, 30)
$labelScan.Text = "Сканировать сеть (например 172.20.1 или 172.20.1.1-10)"
$form.Controls.Add($labelScan)

# Поле для ввода сети
$textboxNetwork = New-Object Windows.Forms.TextBox
$textboxNetwork.Location = New-Object Drawing.Point(80, 100)
$textboxNetwork.Size = New-Object Drawing.Size(220, 50)
$form.Controls.Add($textboxNetwork)

# Кнопка для запуска сканирования
$buttonScan = New-Object Windows.Forms.Button
$buttonScan.Location = New-Object Drawing.Point(120, 165)
$buttonScan.Size = New-Object Drawing.Size(150, 30)
$buttonScan.Text = "Запустить сканирование"
$buttonScan.Add_Click({
    $network = $textboxNetwork.Text
    
    if ([string]::IsNullOrWhiteSpace($network)) {
        # Вывести сообщение, если не введены данные
        [System.Windows.Forms.MessageBox]::Show("Введите сеть для сканирования.", "Ошибка", "OK", "Error")
        return
    }

    # Выполнить сканирование сети
    Write-Host "Сканирование сети: $network"
    
    # Закрыть форму после выполнения сканирования
    $form.Close()

    # После закрытия формы, значение переменной сохраняется и доступно
    $global:subnetInput = $network

})
$form.Controls.Add($buttonScan)

# Добавление обработчика события KeyPress для поля ввода
$textboxNetwork.Add_KeyPress({
    param($sender, $eventArgs)

    # Получение символа, введенного пользователем
    $char = $eventArgs.KeyChar

    # Проверка, является ли символ разрешенным (цифры, точки и дефис), или является ли это Backspace
    if ($char -ne [char]8 -and $char -match '[^0-9.\-]') {
        # Если символ не является разрешенным и не является Backspace, отменяем его ввод
        $eventArgs.Handled = $true
    }

    # Проверка, можно ли ввести второй дефис (запрещаем вводить более одного дефиса)
    if ($char -eq '-' -and $sender.Text.Contains('-')) {
        $eventArgs.Handled = $true
    }

    # Если была нажата клавиша Enter, выполнить сканирование сети
    if ($eventArgs.KeyChar -eq [char]13) { # Enter key
        $buttonScan.PerformClick()
    }
})

# Запуск формы
$form.ShowDialog()
############################################################################################
# Проверяем, содержит ли ввод дефис для обозначения диапазона
if ($subnetInput -match "-") {
    # Если ввод содержит дефис, разделяем его на начальный адрес и октет диапазона
    $startAddress, $endOctet = $subnetInput -split "-"    
    # Формируем конечный адрес, объединяя начальный адрес и октет диапазона
    $endAddress = $startAddress + '.' + $endOctet
    # Извлекаем целочисленное значение последнего октета начального адреса
    [int]$startOctets = ($startAddress -split "\.")[-1]   
    # Присваиваем переменной $endOctets целочисленное значение октета диапазона
    [int]$endOctets = $endOctet   
    # Получаем подсеть, состоящую из первых трех октетов, объединяя их с точками
    $subnet = ($subnetInput -split '\.')[0, 1, 2] -join '.'
    # Создаем пустой массив $sockets для хранения объектов сокетов
    $sockets = @()

    # Вычисляем диапазон адресов и создаем сокеты только для него
    $totalCount = $endOctets - $startOctets + 1
    for ([int]$a = $startOctets; $a -le $endOctets; $a++) {
        # Формируем IP-адрес принтера, объединяя подсеть, текущий октет и точку
        $printer = $subnet + '.' + $a
        
        # Создаем объект сокета типа System.Net.Sockets.TcpClient для каждого адреса принтера
        $socket = New-Object System.Net.Sockets.TcpClient
        
        # Подключаемся асинхронно к принтеру по указанному IP-адресу и порту 9100.
        $socket.ConnectAsync($printer, 9100) | Out-Null
        
        # Добавляем объект сокета в массив $sockets.
        $sockets += $socket
    }
}
else {
    # Если ввод не содержит дефиса, предполагаем, что указан отдельный IP-адрес
    # и выполняем создание сокетов для всех адресов в подсети.
    $subnet = $subnetInput
    $totalCount = 255
    $sockets = @(1..$totalCount | ForEach-Object {
        # Формируем IP-адрес принтера, объединяя подсеть, текущий индекс и точку
        $printer = "$subnet.$_"
        
        # Создаем объект сокета типа System.Net.Sockets.TcpClient для каждого адреса принтера
        $socket = New-Object System.Net.Sockets.TcpClient
        
        # Подключаемся асинхронно к принтеру по указанному IP-адресу и порту 9100.
        $socket.ConnectAsync($printer, 9100) | Out-Null
        
        # Возвращаем созданный объект сокета, который добавляется в массив $sockets.
        $socket
    })
}
# Создаем пустой массив $results для хранения результатов
$results = @()
# Инициализируем счетчик завершенных соединений значением 0
$completedCount = 0
# Задерживаем выполнение скрипта на 3 секунды (3 секунды ожидания сокетов)
sleep -Seconds 3


    # Проверка соединения с каждым принтером
    $sockets | ForEach-Object {
        $socket = $_
if ($socket.Connected) {
    try {
        $SNMP = New-Object -ComObject olePrn.OleSNMP
        $SNMP.Open($socket.Client.RemoteEndPoint.Address.ToString(), "public")
        $model = $SNMP.GET(".1.3.6.1.2.1.25.3.2.1.3.1")
        # OID для Kyocera
        if ($model -like "*ECOSYS*") {
            $name = $SNMP.GET(".1.3.6.1.4.1.1347.40.10.1.1.5.1")
            $serialNumber = $SNMP.Get('.1.3.6.1.2.1.43.5.1.1.17.1')
            $Toner = $SNMP.GET(".1.3.6.1.2.1.43.11.1.1.9.1.1")
            $Max_Toner = $SNMP.GET(".1.3.6.1.2.1.43.11.1.1.8.1.1")
            $Paper_list = $SNMP.Get(".1.3.6.1.2.1.43.10.2.1.4.1.1")
            $Cartridge = $SNMP.GET(".1.3.6.1.2.1.43.11.1.1.6.1.1")
            # OID для Zebra
        } elseif ($model -like "*Zebra*") {
            $name = $SNMP.GET(".1.3.6.1.2.1.1.5.0")
            $serialNumber = $SNMP.Get('.1.3.6.1.4.1.10642.200.19.5.0')
            $Toner = ""
            $Max_Toner = ""
            $Paper_list = $SNMP.Get(".1.3.6.1.4.1.10642.200.17.3.0")
            $Cartridge = ""
            # OID для HP
        } elseif ($model -like "*HP LaserJet Professional M1212nf MFP*"){
            $name = $SNMP.GET(".1.3.6.1.2.1.1.5.0")
            $model = $SNMP.GET(".1.3.6.1.2.1.25.3.2.1.3.1")
            $serialNumber = $SNMP.Get('.1.3.6.1.4.1.11.2.3.9.4.2.1.1.3.3.0')
            $Toner = $SNMP.GET(".1.3.6.1.2.1.43.11.1.1.9.1.1")
            $Max_Toner = $SNMP.GET(".1.3.6.1.2.1.43.11.1.1.8.1.1")
            $Paper_list = $SNMP.Get(".1.3.6.1.2.1.43.10.2.1.4.1.1")
            $Cartridge = $SNMP.GET(".1.3.6.1.2.1.43.11.1.1.6.1.1")
            # OID для Canon
        } elseif ($model -like "*Canon*"){
            $name = $SNMP.GET(".1.3.6.1.2.1.1.5.0")
            $model = $SNMP.GET(".1.3.6.1.2.1.25.3.2.1.3.1")
            $Toner = $SNMP.GET(".1.3.6.1.2.1.43.11.1.1.9.1.1")
            $Max_Toner = $SNMP.GET(".1.3.6.1.2.1.43.11.1.1.8.1.1")
            $Paper_list = $SNMP.Get(".1.3.6.1.2.1.43.10.2.1.4.1.1")
            $Cartridge = $SNMP.GET(".1.3.6.1.2.1.43.11.1.1.6.1.1")
            $serialNumber = $SNMP.Get(".1.3.6.1.4.1.1602.1.2.1.4.0")
            # Общие OID 
        } else {
            $name = $SNMP.GET(".1.3.6.1.2.1.1.5.0")
            $serialNumber = $SNMP.Get('.1.3.6.1.2.1.43.5.1.1.17.1')
            $Toner = $SNMP.GET(".1.3.6.1.2.1.43.11.1.1.9.1.1")
            $Max_Toner = $SNMP.GET(".1.3.6.1.2.1.43.11.1.1.8.1.1")
            $Paper_list = $SNMP.Get(".1.3.6.1.2.1.43.10.2.1.4.1.1")
            $Cartridge = $SNMP.GET(".1.3.6.1.2.1.43.11.1.1.6.1.1")
        }

        $SNMP.Close()

                if ($ShortOutput) {
                    $results += [PSCustomObject]@{
                        Printer = $socket.Client.RemoteEndPoint.Address.ToString()
                        Name = $name
                        Model = $model
                    }
                } else {
                    $results += [PSCustomObject]@{
                        Printer = $socket.Client.RemoteEndPoint.Address.ToString()
                        Name = $name
                        Model = $model
                        Toner = $Toner
                        Max_Toner = $Max_Toner
                        Paper_list = $Paper_list
                        Cartridge = $Cartridge
                        Serial_Number = $serialNumber
                        Selected = $false
                    }
                }
            } catch {
                $SNMP.Close()
                Write-Warning "Ошибка: Некорректная модель на адресе $($socket.Client.RemoteEndPoint.Address.ToString())"
            }
            $socket.Close()

            # Обновление прогресса
            $completedCount++
            $progressPercentage = [int]($completedCount / $totalCount * 100)
            Write-Progress -Activity "Поиск принтеров" -Status "Идет поиск, подождите... ($completedCount / $totalCount)" -PercentComplete $progressPercentage
        }
    }

    $sockets | ForEach-Object {
        $_.Dispose()
    }
    # Создаем форму DatagridView
    Add-Type -AssemblyName System.Windows.Forms
    Add-Type -AssemblyName System.Drawing

    $dataGridView = New-Object System.Windows.Forms.DataGridView
    $dataGridView.Location = New-Object System.Drawing.Point(10, 60)

    if (-not $ShortOutput) {
       $dataGridView.Size = New-Object System.Drawing.Size(1155, 740)
    } else {
        $dataGridView.Size = New-Object System.Drawing.Size(500, 350)
    }

    $dataGridView.AutoGenerateColumns = $false

    $columnCheckBox = New-Object System.Windows.Forms.DataGridViewCheckBoxColumn
    $columnCheckBox.HeaderText = "Выбор"
    $columnCheckBox.Width = 30
    $columnCheckBox.DataPropertyName = "Selected"
    $dataGridView.Columns.Add($columnCheckBox) | Out-Null

    $columnPrinter = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
    $columnPrinter.HeaderText = "IP"
    $columnPrinter.Width = 105
    $columnPrinter.DefaultCellStyle.Alignment = "MiddleRight"
    $columnPrinter.DataPropertyName = "Printer"
    $dataGridView.Columns.Add($columnPrinter) | Out-Null

    $columnName = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
    $columnName.HeaderText = "Name"
    $columnName.Width = 105
    $columnName.DataPropertyName = "Name"
    $dataGridView.Columns.Add($columnName) | Out-Null

    $columnModel = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
    $columnModel.HeaderText = "Model"
    $columnModel.Width = 200
    $columnModel.DataPropertyName = "Model"
    $dataGridView.Columns.Add($columnModel) | Out-Null

    if (-not $ShortOutput) {
        $columnToner = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
        $columnToner.HeaderText = "Уровень тонера"
        $columnToner.Width = 100
        $columnToner.DataPropertyName = "Toner"
        $dataGridView.Columns.Add($columnToner) | Out-Null

        $columnMaxToner = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
        $columnMaxToner.HeaderText = "Максимальный уровень тонера"
        $columnMaxToner.Width = 150
        $columnMaxToner.DataPropertyName = "Max_Toner"
        $dataGridView.Columns.Add($columnMaxToner) | Out-Null

        $columnPaperList = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
        $columnPaperList.HeaderText = "Количество отпечатанных страниц"
        $columnPaperList.Width = 150
        $columnPaperList.DataPropertyName = "Paper_list"
        $dataGridView.Columns.Add($columnPaperList) | Out-Null

        $columnCartridge = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
        $columnCartridge.HeaderText = "Модель картриджа"
        $columnCartridge.Width = 150
        $columnCartridge.DataPropertyName = "Cartridge"
        $dataGridView.Columns.Add($columnCartridge) | Out-Null

        $columnSerialNumber = New-Object System.Windows.Forms.DataGridViewTextBoxColumn
        $columnSerialNumber.HeaderText = "Серийный номер"
        $columnSerialNumber.Width = 150
        $columnSerialNumber.DataPropertyName = "Serial_Number"
        $dataGridView.Columns.Add($columnSerialNumber) | Out-Null
    }

    $objForm = New-Object System.Windows.Forms.Form
    $objForm.Text = "Принтеры"

    if (-not $ShortOutput) {
        $objForm.Size = New-Object System.Drawing.Size(400, 400)
    } else {
        $objForm.Size = New-Object System.Drawing.Size(250, 250)
    }

    $objForm.StartPosition = "CenterScreen"
    $objForm.AutoSize = $true
    $objForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::Fixed3D
    $objForm.KeyPreview = $true

    $objForm.MaximizeBox = $false
    $objForm.MinimizeBox = $false

    $btnOK = New-Object System.Windows.Forms.Button

    if (-not $ShortOutput) {
        $btnOK.Location = New-Object System.Drawing.Size(305, 830)
    } else {
        $btnOK.Location = New-Object System.Drawing.Size(305, 440)
    }

    $btnOK.Size = New-Object System.Drawing.Size(75, 23)
    $btnOK.Text = "OK"
    $btnOK.DialogResult = [System.Windows.Forms.DialogResult]::OK

    $btnCancel = New-Object System.Windows.Forms.Button

    if (-not $ShortOutput) {
        $btnCancel.Location = New-Object System.Drawing.Size(400, 830)
    } else {
        $btnCancel.Location = New-Object System.Drawing.Size(400, 440)
    }

    $btnCancel.Size = New-Object System.Drawing.Size(75, 23)
    $btnCancel.Text = "Cancel"
    $btnCancel.DialogResult = [System.Windows.Forms.DialogResult]::Cancel

    $objForm.AcceptButton = $btnOK
    $objForm.CancelButton = $btnCancel

    $objLabel = New-Object System.Windows.Forms.Label
    $objLabel.Location = New-Object System.Drawing.Size(10, 40)
    $objLabel.Size = New-Object System.Drawing.Size(200, 15)
    $objLabel.Text = "Выберите принтер:"

    $SearchBox = New-Object System.Windows.Forms.TextBox

    if (-not $ShortOutput) {
        $SearchBox.Location = New-Object System.Drawing.Size(10, 830)
    } else {
        $SearchBox.Location = New-Object System.Drawing.Size(10, 440)
    }

    $SearchBox.Size = New-Object System.Drawing.Size(100, 20)

    $SearchButton = New-Object System.Windows.Forms.Button

    if (-not $ShortOutput) {
        $SearchButton.Location = New-Object System.Drawing.Point(120, 830)
    } else {
        $SearchButton.Location = New-Object System.Drawing.Point(120, 440)
    }

    $SearchButton.Size = New-Object System.Drawing.Size(75, 23)
    $SearchButton.Text = "Фильтр"

    $SelectAllCheckBox = New-Object System.Windows.Forms.CheckBox
    $SelectAllCheckBox.Location = New-Object System.Drawing.Point(10, 20)
    $SelectAllCheckBox.Size = New-Object System.Drawing.Size(80, 17)
    $SelectAllCheckBox.Text = "Выбрать все"
    $SelectAllCheckBox.Add_Click({
        foreach ($row in $dataGridView.Rows) {
            $row.Cells[0].Value = $SelectAllCheckBox.Checked
        }
    })

    $objForm.add_KeyDown({
        if ($_.KeyCode -eq "Enter") {
            $SearchButton.PerformClick()
        }
    })

    $SearchButton.add_Click({
        $search_value = $SearchBox.Text.ToLower()
        $dataGridView.Rows.Clear()
        foreach ($result in $results) {
            if ($result.Printer.ToLower().Contains($search_value) -or $result.Name.ToLower().Contains($search_value) -or $result.Model.ToLower().Contains($search_value)) {
                $dataGridView.Rows.Add($false, $result.Printer, $result.Name, $result.Model, $result.Toner, $result.Max_Toner, $result.Paper_list, $result.Cartridge, $result.Serial_Number)
            }
        }
    })

    $results | ForEach-Object {
        $dataGridView.Rows.Add($false, $_.Printer, $_.Name, $_.Model, $_.Toner, $_.Max_Toner, $_.Paper_list, $_.Cartridge, $_.Serial_Number) | Out-Null
    }

    $objForm.Controls.Add($dataGridView)
    $objForm.Controls.Add($btnOK)
    $objForm.Controls.Add($btnCancel)
    $objForm.Controls.Add($objLabel)
    $objForm.Controls.Add($SearchBox)
    $objForm.Controls.Add($SearchButton)
    $objForm.Controls.Add($SelectAllCheckBox)
    $result = $objForm.ShowDialog()

    # Обновление прогресса только в случае, если есть данные для отображения прогресса
    if ($results.Count -gt 0) {
        $progressPercentage = [int]($completedCount / $results.Count * 100)
        Write-Progress -Activity "Поиск принтеров" -Status "Идет поиск, подождите... ($completedCount / $results.Count)" -PercentComplete $progressPercentage
    }

    if ($result -eq [System.Windows.Forms.DialogResult]::OK) {
        $selectedPrinters = @()
        $selectedPrinterData = @()

        foreach ($row in $dataGridView.Rows) {
            if ($row.Cells[0].Value) {
                $ip = $row.Cells[1].Value.ToString()
                $name = $row.Cells[2].Value.ToString()
                $model = $row.Cells[3].Value.ToString()
                #$serialNumber = $row.Cells[8].Value.ToString()

                $selectedPrinters += $ip

                $selectedPrinterData += [PSCustomObject]@{
                    IP = $ip
                    Name = $name
                    Model = $model
                    #Serial = $serialNumber
                }
            }
        }

        Write-Host "Выбранные принтеры: $($selectedPrinters -join ', ')"
$selectedPrinterData | ForEach-Object {
    Write-Host "-----------------------------"
    Write-Host "IP: $($_.IP)"
    Write-Host "Name: $($_.Name)"
    Write-Host "Model: $($_.Model)"
}

    } else {
        Write-Host "Отменено пользователем"
    }

    Write-Progress -Activity "Поиск принтеров" -Completed
    
    # Повтор
    $wshell = New-Object -ComObject Wscript.Shell
    $Output = $wshell.Popup("Просканировать ещё раз?", 0, "Выбор", 4)

} while ($Output -eq 6)
